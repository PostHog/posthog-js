name: "Release"

permissions:
  contents: write
  actions: write

on:
  push:
    branches:
      - main
  workflow_dispatch:
  issue_comment:
    types: [created]

jobs:
  release:
    name: Publish
    runs-on: ubuntu-latest
    if: github.event_name != 'issue_comment' || (github.event.issue.pull_request && contains(github.event.comment.body, '/test-release'))
    strategy:
      fail-fast: false
      matrix:
        package:
          - name: posthog-react-native
          - name: posthog-node
          - name: posthog-js-lite
          - name: posthog-js
          - name: "@posthog/core"
          - name: "@posthog/react"
          - name: "@posthog/ai"
          - name: "@posthog/nextjs-config"

    steps:
      - name: Get PR ref
        if: github.event_name == 'issue_comment'
        id: get-pr-ref
        run: |
          PR_NUMBER=${{ github.event.issue.number }}
          PR_REF=$(gh pr view $PR_NUMBER --json headRefName --jq .headRefName)
          echo "ref=$PR_REF" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'issue_comment' && steps.get-pr-ref.outputs.ref || '' }}

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          install: false
          build: false

      - name: Get package path
        id: get-package-path
        run: |
          PACKAGE_PATH=$(pnpm list --filter=${{ matrix.package.name }} --json | jq -r '.[0].path')
          echo "path=$PACKAGE_PATH" >> "$GITHUB_OUTPUT"

      - name: Check ${{ matrix.package.name }} version and detect an update
        id: check-package-version
        uses: PostHog/check-package-version@v2.1.0
        with:
          path: ${{ steps.get-package-path.outputs.path }}

      - name: Release package ${{ matrix.package.name }}
        uses: ./.github/actions/release
        if: steps.check-package-version.outputs.is-new-version == 'true'
        with:
          package_path: ${{ steps.get-package-path.outputs.path }}
          package_name: ${{ matrix.package.name }}
          package_version: ${{ steps.check-package-version.outputs.committed-version }}
          npm_token: ${{ secrets.NPM_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

#      - name: Dispatch posthog upgrade for ${{ matrix.package.name }}
#        if: matrix.package.name == 'posthog-js' && steps.check-package-version.outputs.is-new-version == 'true'
#        run: |
#          curl -f -X POST \
#               -H "Accept: application/vnd.github+json" \
#               -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
#               https://api.github.com/repos/posthog/posthog-js/actions/workflows/posthog-upgrade.yml/dispatches \
#               -d '{
#                 "ref": "main",
#                 "inputs": {
#                   "package_name": "${{ matrix.package.name }}",
#                   "package_version": "${{ steps.check-package-version.outputs.committed-version }}"
#                 }
#               }'
#
#      - name: Dispatch posthog.com upgrade for ${{ matrix.package.name }}
#        if: matrix.package.name == 'posthog-js' && steps.check-package-version.outputs.is-new-version == 'true'
#        run: |
#          curl -f -X POST \
#               -H "Accept: application/vnd.github+json" \
#               -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
#               https://api.github.com/repos/posthog/posthog-js/actions/workflows/posthog-com-upgrade.yml/dispatches \
#               -d '{
#                 "ref": "main",
#                 "inputs": {
#                   "package_name": "${{ matrix.package.name }}",
#                   "package_version": "${{ steps.check-package-version.outputs.committed-version }}"
#                 }
#               }'
