name: "Release Workflow"
description: "Publish package to NPM and create a GitHub release"

inputs:
  package_path:
    description: "Package path to publish"
    required: true
  package_name:
    description: "Package name to publish"
    required: true
  package_version:
    description: "Package version to publish"
    required: true
  npm_token:
    description: "NPM token to publish package"
    required: true
  github_token:
    description: "GitHub token to create release"
    required: true

runs:
  using: "composite"
  steps:
    - name: Install dependencies
      shell: bash
      run: pnpm install --frozen-lockfile

    - name: Build package
      shell: bash
      run: pnpm build

    - name: Tag repository with package_name and package_version
      shell: bash
      run: |
        git tag -a "${{ inputs.package_name }}@${{ inputs.package_version }}" -m "${{ inputs.package_name }}@${{ inputs.package_version }}"

    - name: Publish package to NPM
      shell: bash
      run: |
        pnpm publish --filter=${{ inputs.package_name }} --access public
      env:
        NPM_TOKEN: ${{ inputs.npm_token }}

    - name: Push tag to GitHub
      shell: bash
      run: |
        git push origin "${{ inputs.package_name }}@${{ inputs.package_version }}"

    - name: Create GitHub release
      working-directory: ${{ inputs.package_path }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      run: |
        # read from the first until the second header in the changelog file
        # this assumes the formatting of the file
        # and that this workflow is always running for the most recent entry in the file
        LAST_CHANGELOG_ENTRY=$(awk -v defText="see CHANGELOG.md" '/^## /{if (flag) exit; flag=1} flag && /^##$/{exit} flag; END{if (!flag) print defText}' CHANGELOG.md)
        # the action we used to use was archived, and made it really difficult to create a release with a body
        # because the LAST_CHANGELOG_ENTRY contains bash special characters so passing it between steps
        # was a pain.
        # we can use the github cli to create a release with a body
        # all as part of one step
        gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/posthog/posthog-js/releases \
          -f tag_name="${{ inputs.package_name }}@${{ inputs.package_version }}" \
        -f target_commitish='main' \
        -f name="${{ inputs.package_name }}@${{ inputs.package_version }}" \
        -f body="$LAST_CHANGELOG_ENTRY" \
        -F draft=false \
        -F prerelease=false \
        -F generate_release_notes=false
