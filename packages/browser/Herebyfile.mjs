import { spawn } from 'child_process'
import { readdirSync, readFileSync } from 'fs'
import { task } from 'hereby'
import { globSync } from 'glob'
import path from 'path'
import fs from 'fs'

const cleanLib = task({
    name: 'clean-lib',
    hiddenFromTaskList: true,
    run: async () => {
        await exec('rimraf', ['-rf', './lib'])
    },
})

const buildLib = task({
    name: 'build-lib',
    hiddenFromTaskList: true,
    dependencies: [cleanLib],
    run: async () => {
        await exec('tsc', ['-b', 'tsconfig.lib.json'])
    },
})

const cleanDist = task({
    name: 'clean-dist',
    hiddenFromTaskList: true,
    run: async () => {
        await exec('rimraf', ['-rf', './dist'])
    },
})

function buildEntrypoint(file) {
    return task({
        name: 'build-entrypoint-' + file,
        dependencies: [buildLib, cleanDist],
        hiddenFromTaskList: true,
        run: async () => {
            await exec('rollup', ['-c', '--entrypoint', file])
        },
    })
}

const entrypoints = readdirSync('./src/entrypoints')

export const buildDist = task({
    name: 'build-dist',
    dependencies: [...entrypoints.map(buildEntrypoint)],
    run: async () => {
        if (process.env.WRITE_MANGLED_PROPERTIES) {
            let globalNames = new Set()
            const files = globSync('debug/*/terser-mangled-names.json')
            files.forEach((file) => {
                const content = readFileSync(path.resolve(file), 'utf8')
                const names = JSON.parse(content)
                names.names.forEach((n) => globalNames.add(n))
            })
            globalNames = Array.from(globalNames)
            globalNames.sort()
            fs.writeFileSync(
                'terser-mangled-names.json',
                JSON.stringify(
                    {
                        '//': 'THIS FILE IS AUTO_GENERATED BY rollup.config.js DO NOT EDIT IT DIRECTLY\nIf a line has been added to this file after a build, it means that the terser mangler has added a new property to the list of mangled properties.\nCI will fail unless changes to this file are committed.\nRun a build with `WRITE_MANGLED_PROPERTIES=1 pnpm run build` and commit the new version of this file',
                        names: globalNames,
                    },
                    null,
                    4
                ) + '\n'
            )
        }
    },
})

export const buildReact = task({
    name: 'build-react',
    dependencies: [buildDist],
    run: async () => {
        await exec('pnpm', ['build'], { cwd: './react' })
    },
})

export const build = task({
    name: 'build',
    dependencies: [buildReact],
})

export const start = task({
    name: 'start',
    dependencies: [],
    run: async () => {
        await exec('chokidar', ['src', 'react/src', '--initial', '--silent', '-c', 'hereby build'])
    },
})

function exec(cmd, args, options) {
    // eslint-disable-next-line no-console
    console.log(`running: ${cmd} ${args.join(' ')}`)
    const subprocess = spawn(cmd, args, { stdio: 'inherit', env: process.env, preferLocal: true, ...options })
    return new Promise((resolve, reject) => {
        subprocess.on('error', reject)
        subprocess.on('exit', (code) => {
            if (code === 0) {
                resolve()
            } else {
                reject(new Error(`Command failed with exit code ${code}`))
            }
        })
    })
}
