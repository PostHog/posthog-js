// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getChangeStateKeys correctness tests should handle Redux-style state changes 1`] = `
Object {
  "nextState": Object {
    "todos": Array [
      Object {
        "completed": true,
        "id": 1,
        "text": "Learn React",
      },
      Object {
        "completed": true,
        "id": 2,
        "text": "Learn Redux",
      },
      Object {
        "completed": false,
        "id": 3,
        "text": "Learn Testing",
      },
    ],
    "user": Object {
      "profile": Object {
        "avatar": "new.jpg",
      },
    },
    "visibilityFilter": "SHOW_COMPLETED",
  },
  "prevState": Object {
    "todos": Array [
      Object {
        "completed": false,
        "id": 1,
        "text": "Learn React",
      },
      Object {
        "completed": true,
        "id": 2,
        "text": "Learn Redux",
      },
    ],
    "user": Object {
      "profile": Object {
        "avatar": "old.jpg",
      },
    },
    "visibilityFilter": "SHOW_ALL",
  },
}
`;

exports[`getChangeStateKeys correctness tests should handle added keys 1`] = `
Object {
  "nextState": Object {
    "c": 3,
  },
  "prevState": Object {},
}
`;

exports[`getChangeStateKeys correctness tests should handle arrays as primitive values 1`] = `
Object {
  "nextState": Object {
    "list": Array [
      1,
      2,
      3,
      4,
    ],
  },
  "prevState": Object {
    "list": Array [
      1,
      2,
      3,
    ],
  },
}
`;

exports[`getChangeStateKeys correctness tests should handle changed keys 1`] = `
Object {
  "nextState": Object {
    "b": 5,
  },
  "prevState": Object {
    "b": 2,
  },
}
`;

exports[`getChangeStateKeys correctness tests should handle deeply nested changes within depth limit 1`] = `
Object {
  "nextState": Object {
    "level1": Object {
      "level2": Object {
        "level3": Object {
          "value": "new",
        },
      },
    },
  },
  "prevState": Object {
    "level1": Object {
      "level2": Object {
        "level3": Object {
          "value": "old",
        },
      },
    },
  },
}
`;

exports[`getChangeStateKeys correctness tests should handle depth limit respected 1`] = `
Object {
  "nextState": Object {
    "l1": Object {
      "l2": Object {
        "l3": Object {
          "l4": Object {
            "l5": "new",
          },
        },
      },
    },
  },
  "prevState": Object {
    "l1": Object {
      "l2": Object {
        "l3": Object {
          "l4": Object {
            "l5": "old",
          },
        },
      },
    },
  },
}
`;

exports[`getChangeStateKeys correctness tests should handle empty objects 1`] = `
Object {
  "nextState": Object {
    "a": 1,
  },
  "prevState": Object {},
}
`;

exports[`getChangeStateKeys correctness tests should handle identical states 1`] = `
Object {
  "nextState": Object {},
  "prevState": Object {},
}
`;

exports[`getChangeStateKeys correctness tests should handle mixed data types 1`] = `
Object {
  "nextState": Object {
    "array": Array [
      4,
      5,
      6,
    ],
    "boolean": false,
    "nullValue": "not null",
    "object": Object {
      "nested": "changed",
    },
    "string": "world",
    "undefinedValue": "defined",
  },
  "prevState": Object {
    "array": Array [
      1,
      2,
      3,
    ],
    "boolean": true,
    "nullValue": null,
    "object": Object {
      "nested": "value",
    },
    "string": "hello",
  },
}
`;

exports[`getChangeStateKeys correctness tests should handle nested object changes 1`] = `
Object {
  "nextState": Object {
    "settings": Object {
      "theme": "light",
    },
    "user": Object {
      "age": 31,
    },
  },
  "prevState": Object {
    "settings": Object {
      "theme": "dark",
    },
    "user": Object {
      "age": 30,
    },
  },
}
`;

exports[`getChangeStateKeys correctness tests should handle null and undefined values 1`] = `
Object {
  "nextState": Object {
    "a": "changed",
    "b": "defined",
    "c": null,
  },
  "prevState": Object {
    "a": null,
    "c": "value",
  },
}
`;

exports[`getChangeStateKeys correctness tests should handle number vs boolean (non-object input) 1`] = `Object {}`;

exports[`getChangeStateKeys correctness tests should handle object vs null (non-object input) 1`] = `
Object {
  "nextState": null,
  "prevState": Object {
    "a": 1,
  },
}
`;

exports[`getChangeStateKeys correctness tests should handle removed keys 1`] = `
Object {
  "nextState": Object {},
  "prevState": Object {
    "c": 3,
  },
}
`;

exports[`getChangeStateKeys correctness tests should handle string vs object (non-object input) 1`] = `Object {}`;
