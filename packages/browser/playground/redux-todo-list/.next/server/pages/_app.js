/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/_app";
exports.ids = ["pages/_app"];
exports.modules = {

/***/ "./pages/_app.tsx":
/*!************************!*\
  !*** ./pages/_app.tsx ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ App)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-redux */ \"react-redux\");\n/* harmony import */ var _src_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../src/store */ \"./src/store.ts\");\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../styles/globals.css */ \"./styles/globals.css\");\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_styles_globals_css__WEBPACK_IMPORTED_MODULE_3__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([react_redux__WEBPACK_IMPORTED_MODULE_1__, _src_store__WEBPACK_IMPORTED_MODULE_2__]);\n([react_redux__WEBPACK_IMPORTED_MODULE_1__, _src_store__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\nfunction App({ Component, pageProps }) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_redux__WEBPACK_IMPORTED_MODULE_1__.Provider, {\n        store: _src_store__WEBPACK_IMPORTED_MODULE_2__.store,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n            ...pageProps\n        }, void 0, false, {\n            fileName: \"/Users/pauldambra/github/posthog-js/packages/browser/playground/redux-todo-list/pages/_app.tsx\",\n            lineNumber: 9,\n            columnNumber: 13\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/pauldambra/github/posthog-js/packages/browser/playground/redux-todo-list/pages/_app.tsx\",\n        lineNumber: 8,\n        columnNumber: 9\n    }, this);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9fYXBwLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFzQztBQUNGO0FBRU47QUFFZixTQUFTRSxJQUFJLEVBQUVDLFNBQVMsRUFBRUMsU0FBUyxFQUFZO0lBQzFELHFCQUNJLDhEQUFDSixpREFBUUE7UUFBQ0MsT0FBT0EsNkNBQUtBO2tCQUNsQiw0RUFBQ0U7WUFBVyxHQUFHQyxTQUFTOzs7Ozs7Ozs7OztBQUdwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZHV4LXRvZG8tbGlzdC8uL3BhZ2VzL19hcHAudHN4PzJmYmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IHN0b3JlIH0gZnJvbSAnLi4vc3JjL3N0b3JlJ1xuaW1wb3J0IHR5cGUgeyBBcHBQcm9wcyB9IGZyb20gJ25leHQvYXBwJ1xuaW1wb3J0ICcuLi9zdHlsZXMvZ2xvYmFscy5jc3MnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCh7IENvbXBvbmVudCwgcGFnZVByb3BzIH06IEFwcFByb3BzKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgICAgICAgICA8Q29tcG9uZW50IHsuLi5wYWdlUHJvcHN9IC8+XG4gICAgICAgIDwvUHJvdmlkZXI+XG4gICAgKVxufVxuIl0sIm5hbWVzIjpbIlByb3ZpZGVyIiwic3RvcmUiLCJBcHAiLCJDb21wb25lbnQiLCJwYWdlUHJvcHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./pages/_app.tsx\n");

/***/ }),

/***/ "./src/posthogReplayReduxLogger.ts":
/*!*****************************************!*\
  !*** ./src/posthogReplayReduxLogger.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   posthogReplayReduxLogger: () => (/* binding */ posthogReplayReduxLogger)\n/* harmony export */ });\n// Redux-compatible types without depending on Redux\n// Copied from https://github.com/reduxjs/redux/blob/6c8c3a10f6e5a35f0c4a61413d7a93a53e4f11d4/src/types/actions.ts#L32\n/**\n * An Action type which accepts any other properties.\n * This is mainly for the use of the `Reducer` type.\n * This is not part of `Action` itself to prevent types that extend `Action` from\n * having an index signature.\n */ /**\n * Default title function for Redux events\n */ function defaultTitleFunction(reduxEvent) {\n    const { type, executionTimeMs } = reduxEvent;\n    const timeText = executionTimeMs !== undefined ? ` (${executionTimeMs.toFixed(2)}ms)` : '';\n    return `[PostHog Redux Logger] ${type}${timeText}`;\n}\nfunction defaultLogger(title, reduxEvent) {\n    console.log(title, reduxEvent);\n}\n/**\n * Get only the changed keys from two states\n * Returns { prevState: changedKeysOnly, nextState: changedKeysOnly }\n */ function getChangedStateKeys(prevState, nextState) {\n    if (prevState === nextState) {\n        return {\n            prevState: {},\n            nextState: {}\n        };\n    }\n    if (typeof prevState !== 'object' || typeof nextState !== 'object' || prevState === null || nextState === null) {\n        return {\n            prevState: prevState,\n            nextState: nextState\n        };\n    }\n    if (Array.isArray(prevState) || Array.isArray(nextState)) {\n        return {\n            prevState: prevState,\n            nextState: nextState\n        };\n    }\n    const prevFiltered = {};\n    const nextFiltered = {};\n    const allKeys = new Set([\n        ...Object.keys(prevState),\n        ...Object.keys(nextState)\n    ]);\n    for (const key of allKeys){\n        const prevValue = prevState[key];\n        const nextValue = nextState[key];\n        if (!(key in prevState)) {\n            // Key was added\n            nextFiltered[key] = nextValue;\n        } else if (!(key in nextState)) {\n            // Key was removed\n            prevFiltered[key] = prevValue;\n        } else if (prevValue !== nextValue) {\n            // Key was changed\n            if (typeof prevValue === 'object' && typeof nextValue === 'object' && prevValue !== null && nextValue !== null && !Array.isArray(prevValue) && !Array.isArray(nextValue)) {\n                // Recursively handle nested objects\n                const nested = getChangedStateKeys(prevValue, nextValue);\n                if (Object.keys(nested.prevState).length > 0 || Object.keys(nested.nextState).length > 0) {\n                    if (Object.keys(nested.prevState).length > 0) prevFiltered[key] = nested.prevState;\n                    if (Object.keys(nested.nextState).length > 0) nextFiltered[key] = nested.nextState;\n                }\n            } else {\n                // Primitive values or arrays - include both\n                prevFiltered[key] = prevValue;\n                nextFiltered[key] = nextValue;\n            }\n        }\n    }\n    return {\n        prevState: prevFiltered,\n        nextState: nextFiltered\n    };\n}\n/**\n * Creates a Redux middleware that logs actions and state changes for PostHog session replay\n * This can be used as middleware in any Redux store to capture state changes\n */ function posthogReplayReduxLogger(config = {}) {\n    const { maskReduxAction = (action)=>action, maskReduxState = (state)=>state, titleFunction = defaultTitleFunction, logger = defaultLogger, diffState = true } = config;\n    return (store)=>(next)=>(action)=>{\n                // Get the state before the action\n                const prevState = store.getState();\n                // Track execution time\n                // eslint-disable-next-line compat/compat\n                const startTime = performance.now();\n                const result = next(action);\n                // eslint-disable-next-line compat/compat\n                const endTime = performance.now();\n                const executionTimeMs = endTime - startTime;\n                // Get the state after the action\n                const nextState = store.getState();\n                const maskedAction = maskReduxAction(action);\n                if (!maskedAction) {\n                    return result;\n                }\n                // Apply masking to states\n                const maskedPrevState = maskReduxState(prevState, maskedAction);\n                const maskedNextState = maskReduxState(nextState, maskedAction);\n                let filteredPrevState;\n                let filteredNextState;\n                if (diffState) {\n                    const { prevState: diffedPrevState, nextState: diffedNextState } = getChangedStateKeys(maskedPrevState, maskedNextState);\n                    filteredPrevState = diffedPrevState;\n                    filteredNextState = diffedNextState;\n                } else {\n                    filteredPrevState = maskedPrevState;\n                    filteredNextState = maskedNextState;\n                }\n                const { type, ...actionData } = maskedAction;\n                const reduxEvent = {\n                    type,\n                    payload: actionData,\n                    timestamp: Date.now(),\n                    executionTimeMs,\n                    prevState: filteredPrevState,\n                    nextState: filteredNextState\n                };\n                logger(titleFunction(reduxEvent), reduxEvent);\n                return result;\n            };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/posthogReplayReduxLogger.ts\n");

/***/ }),

/***/ "./src/store.ts":
/*!**********************!*\
  !*** ./src/store.ts ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ADD_TODO: () => (/* binding */ ADD_TODO),\n/* harmony export */   CLEAR_COMPLETED: () => (/* binding */ CLEAR_COMPLETED),\n/* harmony export */   DELETE_TODO: () => (/* binding */ DELETE_TODO),\n/* harmony export */   SET_ERROR: () => (/* binding */ SET_ERROR),\n/* harmony export */   SET_FILTER: () => (/* binding */ SET_FILTER),\n/* harmony export */   SET_LOADING: () => (/* binding */ SET_LOADING),\n/* harmony export */   SET_THEME: () => (/* binding */ SET_THEME),\n/* harmony export */   SET_USER_NAME: () => (/* binding */ SET_USER_NAME),\n/* harmony export */   TOGGLE_NOTIFICATIONS: () => (/* binding */ TOGGLE_NOTIFICATIONS),\n/* harmony export */   TOGGLE_SHOW_COMPLETED: () => (/* binding */ TOGGLE_SHOW_COMPLETED),\n/* harmony export */   TOGGLE_TODO: () => (/* binding */ TOGGLE_TODO),\n/* harmony export */   UPDATE_STATS: () => (/* binding */ UPDATE_STATS),\n/* harmony export */   addTodo: () => (/* binding */ addTodo),\n/* harmony export */   clearCompleted: () => (/* binding */ clearCompleted),\n/* harmony export */   deleteTodo: () => (/* binding */ deleteTodo),\n/* harmony export */   setError: () => (/* binding */ setError),\n/* harmony export */   setFilter: () => (/* binding */ setFilter),\n/* harmony export */   setLoading: () => (/* binding */ setLoading),\n/* harmony export */   setTheme: () => (/* binding */ setTheme),\n/* harmony export */   setUserName: () => (/* binding */ setUserName),\n/* harmony export */   store: () => (/* binding */ store),\n/* harmony export */   todoReducer: () => (/* binding */ todoReducer),\n/* harmony export */   toggleNotifications: () => (/* binding */ toggleNotifications),\n/* harmony export */   toggleShowCompleted: () => (/* binding */ toggleShowCompleted),\n/* harmony export */   toggleTodo: () => (/* binding */ toggleTodo),\n/* harmony export */   updateStats: () => (/* binding */ updateStats)\n/* harmony export */ });\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ \"redux\");\n/* harmony import */ var _posthogReplayReduxLogger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./posthogReplayReduxLogger */ \"./src/posthogReplayReduxLogger.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([redux__WEBPACK_IMPORTED_MODULE_0__]);\nredux__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n// Action Types\nconst ADD_TODO = 'ADD_TODO';\nconst TOGGLE_TODO = 'TOGGLE_TODO';\nconst DELETE_TODO = 'DELETE_TODO';\nconst SET_FILTER = 'SET_FILTER';\nconst CLEAR_COMPLETED = 'CLEAR_COMPLETED';\nconst SET_USER_NAME = 'SET_USER_NAME';\nconst SET_THEME = 'SET_THEME';\nconst TOGGLE_NOTIFICATIONS = 'TOGGLE_NOTIFICATIONS';\nconst SET_LOADING = 'SET_LOADING';\nconst SET_ERROR = 'SET_ERROR';\nconst TOGGLE_SHOW_COMPLETED = 'TOGGLE_SHOW_COMPLETED';\nconst UPDATE_STATS = 'UPDATE_STATS';\n// Action Creators\nconst addTodo = (text)=>({\n        type: ADD_TODO,\n        payload: {\n            id: Date.now(),\n            text,\n            completed: false\n        }\n    });\nconst toggleTodo = (id)=>({\n        type: TOGGLE_TODO,\n        payload: id\n    });\nconst deleteTodo = (id)=>({\n        type: DELETE_TODO,\n        payload: id\n    });\nconst setFilter = (filter)=>({\n        type: SET_FILTER,\n        payload: filter\n    });\nconst clearCompleted = ()=>({\n        type: CLEAR_COMPLETED\n    });\nconst setUserName = (name)=>({\n        type: SET_USER_NAME,\n        payload: name\n    });\nconst setTheme = (theme)=>({\n        type: SET_THEME,\n        payload: theme\n    });\nconst toggleNotifications = ()=>({\n        type: TOGGLE_NOTIFICATIONS\n    });\nconst setLoading = (isLoading)=>({\n        type: SET_LOADING,\n        payload: isLoading\n    });\nconst setError = (error)=>({\n        type: SET_ERROR,\n        payload: error\n    });\nconst toggleShowCompleted = ()=>({\n        type: TOGGLE_SHOW_COMPLETED\n    });\nconst updateStats = ()=>({\n        type: UPDATE_STATS\n    });\n// Initial State\nconst initialState = {\n    todos: [\n        {\n            id: 1,\n            text: 'Learn Redux with TypeScript',\n            completed: false\n        },\n        {\n            id: 2,\n            text: 'Build a todo app',\n            completed: false\n        },\n        {\n            id: 3,\n            text: 'Test with PostHog',\n            completed: false\n        }\n    ],\n    filter: 'all',\n    user: {\n        name: 'Demo User',\n        email: 'demo@example.com',\n        preferences: {\n            theme: 'light',\n            notifications: true\n        }\n    },\n    ui: {\n        isLoading: false,\n        error: null,\n        showCompleted: true\n    },\n    stats: {\n        totalTodos: 3,\n        completedTodos: 0,\n        todayCount: 3\n    }\n};\n// Reducer\nconst todoReducer = (state = initialState, action)=>{\n    switch(action.type){\n        case ADD_TODO:\n            return {\n                ...state,\n                todos: [\n                    ...state.todos,\n                    action.payload\n                ]\n            };\n        case TOGGLE_TODO:\n            return {\n                ...state,\n                todos: state.todos.map((todo)=>todo.id === action.payload ? {\n                        ...todo,\n                        completed: !todo.completed\n                    } : todo)\n            };\n        case DELETE_TODO:\n            return {\n                ...state,\n                todos: state.todos.filter((todo)=>todo.id !== action.payload)\n            };\n        case SET_FILTER:\n            return {\n                ...state,\n                filter: action.payload\n            };\n        case CLEAR_COMPLETED:\n            return {\n                ...state,\n                todos: state.todos.filter((todo)=>!todo.completed)\n            };\n        case SET_USER_NAME:\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    name: action.payload\n                }\n            };\n        case SET_THEME:\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    preferences: {\n                        ...state.user.preferences,\n                        theme: action.payload\n                    }\n                }\n            };\n        case TOGGLE_NOTIFICATIONS:\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    preferences: {\n                        ...state.user.preferences,\n                        notifications: !state.user.preferences.notifications\n                    }\n                }\n            };\n        case SET_LOADING:\n            return {\n                ...state,\n                ui: {\n                    ...state.ui,\n                    isLoading: action.payload\n                }\n            };\n        case SET_ERROR:\n            return {\n                ...state,\n                ui: {\n                    ...state.ui,\n                    error: action.payload\n                }\n            };\n        case TOGGLE_SHOW_COMPLETED:\n            return {\n                ...state,\n                ui: {\n                    ...state.ui,\n                    showCompleted: !state.ui.showCompleted\n                }\n            };\n        case UPDATE_STATS:\n            return {\n                ...state,\n                stats: {\n                    ...state.stats,\n                    totalTodos: state.todos.length,\n                    completedTodos: state.todos.filter((todo)=>todo.completed).length,\n                    todayCount: state.todos.length\n                }\n            };\n        default:\n            return state;\n    }\n};\n// Create PostHog Redux logger middleware\nconst posthogMiddleware = (0,_posthogReplayReduxLogger__WEBPACK_IMPORTED_MODULE_1__.posthogReplayReduxLogger)({\n    // Example: mask sensitive data from actions\n    maskReduxAction: (action)=>{\n        // Return null to skip logging this action entirely\n        // if (action.type === 'SENSITIVE_ACTION') return null\n        // Mask sensitive fields in the action\n        // if (action.type === 'SET_USER_DATA' && action.payload?.password) {\n        //     return { ...action, payload: { ...action.payload, password: '[REDACTED]' } }\n        // }\n        // Default: log everything unchanged\n        return action;\n    },\n    // Example: mask sensitive data from state\n    maskReduxState: (state)=>{\n        // You could remove sensitive fields from state here\n        // const { sensitiveData, ...maskedState } = state\n        // return maskedState\n        // Default: return state unchanged\n        return state;\n    }\n});\n// Compose enhancers with Redux DevTools\nconst composeEnhancers =  false ? 0 : redux__WEBPACK_IMPORTED_MODULE_0__.compose;\n// Create and export store with middleware\nconst store = (0,redux__WEBPACK_IMPORTED_MODULE_0__.createStore)(todoReducer, initialState, composeEnhancers((0,redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware)(posthogMiddleware)));\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/store.ts\n");

/***/ }),

/***/ "./styles/globals.css":
/*!****************************!*\
  !*** ./styles/globals.css ***!
  \****************************/
/***/ (() => {



/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "react-redux":
/*!******************************!*\
  !*** external "react-redux" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = import("react-redux");;

/***/ }),

/***/ "redux":
/*!************************!*\
  !*** external "redux" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = import("redux");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/_app.tsx"));
module.exports = __webpack_exports__;

})();