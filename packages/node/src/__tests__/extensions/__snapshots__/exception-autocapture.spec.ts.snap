// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`exception autocapture should listen to uncaught errors 1`] = `
{
  "distinctId": "stable_id",
  "event": "$exception",
  "properties": {
    "$exception_level": "error",
    "$exception_list": [
      {
        "mechanism": {
          "handled": false,
          "synthetic": false,
          "type": "onuncaughtexception",
        },
        "stacktrace": {
          "frames": [
            {
              "colno": 28,
              "filename": "node:internal/per_context/messageport",
              "function": "MessagePort.?",
              "in_app": false,
              "lineno": 23,
              "module": "messageport",
              "platform": "node:javascript",
            },
            {
              "colno": 20,
              "filename": "node:internal/event_target",
              "function": "[nodejs.internal.kHybridDispatch]",
              "in_app": false,
              "lineno": 831,
              "module": "event_target",
              "platform": "node:javascript",
            },
            {
              "colno": 11,
              "context_line": "    throw new Error(msg.data)",
              "filename": "/Users/hpouillot/Code/posthog-js/packages/node/src/__tests__/extensions/exception-autocapture.worker.mjs",
              "function": "MessagePort.?",
              "in_app": true,
              "lineno": 10,
              "module": "exception-autocapture.worker",
              "platform": "node:javascript",
              "post_context": [
                "  } else if (msg.action == 'reject_promise') {",
                "    return Promise.reject(new Error(msg.data))",
                "  } else {",
                "    console.error('Unrecognized message from main thread:', msg)",
                "  }",
                "})",
                "",
              ],
              "pre_context": [
                "",
                "const posthog = new PostHog('api_key', {",
                "  enableExceptionAutocapture: true,",
                "})",
                "",
                "parentPort.on('message', (msg) => {",
                "  if (msg.action == 'throw_error') {",
              ],
            },
          ],
          "type": "raw",
        },
        "type": "Error",
        "value": "Uncaught Error",
      },
    ],
    "$process_person_profile": false,
  },
}
`;

exports[`exception autocapture should listen to unhandled rejections 1`] = `
{
  "distinctId": "stable_id",
  "event": "$exception",
  "properties": {
    "$exception_level": "error",
    "$exception_list": [
      {
        "mechanism": {
          "handled": false,
          "synthetic": false,
          "type": "onuncaughtexception",
        },
        "stacktrace": {
          "frames": [
            {
              "colno": 28,
              "filename": "node:internal/per_context/messageport",
              "function": "MessagePort.?",
              "in_app": false,
              "lineno": 23,
              "module": "messageport",
              "platform": "node:javascript",
            },
            {
              "colno": 20,
              "filename": "node:internal/event_target",
              "function": "[nodejs.internal.kHybridDispatch]",
              "in_app": false,
              "lineno": 831,
              "module": "event_target",
              "platform": "node:javascript",
            },
            {
              "colno": 27,
              "context_line": "    return Promise.reject(new Error(msg.data))",
              "filename": "/Users/hpouillot/Code/posthog-js/packages/node/src/__tests__/extensions/exception-autocapture.worker.mjs",
              "function": "MessagePort.?",
              "in_app": true,
              "lineno": 12,
              "module": "exception-autocapture.worker",
              "platform": "node:javascript",
              "post_context": [
                "  } else {",
                "    console.error('Unrecognized message from main thread:', msg)",
                "  }",
                "})",
                "",
                "await new Promise((res) => {",
                "  posthog.capture = (event) => {",
              ],
              "pre_context": [
                "  enableExceptionAutocapture: true,",
                "})",
                "",
                "parentPort.on('message', (msg) => {",
                "  if (msg.action == 'throw_error') {",
                "    throw new Error(msg.data)",
                "  } else if (msg.action == 'reject_promise') {",
              ],
            },
          ],
          "type": "raw",
        },
        "type": "Error",
        "value": "Unhandled Promise",
      },
    ],
    "$process_person_profile": false,
  },
}
`;
