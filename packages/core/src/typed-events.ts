/**
 * Auto-generated typed event builders for PostHog events.
 * This file would be generated by the CLI based on the event schemas from the backend.
 */

import type { PostHogEventProperties, PostHogEventSchemas } from './types'

// Utility type that allows schema properties plus any additional properties
// The schema properties are strictly typed, additional ones are any
export type EventWithAdditionalProperties<T> = T & Record<string, any>

/**
 * Type-safe event capture methods generated from PostHog event schemas.
 * Provides compile-time validation for required fields and types while
 * still allowing additional properties for flexibility.
 */
export class TypedEventCapture<Client> {
  constructor(private client: Client & { capture: (event: string, properties?: any) => any }) {}

  /**
   * Helper method to create a typed event method.
   * This ensures consistent behavior across all generated events.
   */
  private captureEvent(
    eventName: string,
    properties: Record<string, any>
  ) {
    return this.client.capture(eventName, properties)
  }

  // ============ AUTO-GENERATED EVENT METHODS ============
  // These would be generated from the backend schema

  /**
   * Capture an 'uploaded_file' event
   * @param properties Event properties including required 'file_size_b' and optional schema fields, plus any additional properties
   */
  uploadedFile(properties: EventWithAdditionalProperties<{
    file_size_b: number      // Required: File size in bytes
    file_name?: string       // Optional: Name of the uploaded file
    file_type?: string       // Optional: MIME type of the file
  }>) {
    return this.captureEvent('uploaded_file', properties)
  }

  /**
   * Capture a 'downloaded_file' event
   * @param properties Event properties including required 'file_size_b' and optional schema fields, plus any additional properties
   */
  downloadedFile(properties: EventWithAdditionalProperties<{
    file_size_b: number      // Required: File size in bytes
    file_name?: string       // Optional: Name of the downloaded file
    file_type?: string       // Optional: MIME type of the file
  }>) {
    return this.captureEvent('downloaded_file', properties)
  }

  // Additional events would be generated here...
}

// Export a factory function for creating typed event captures
export function createTypedEventCapture<Client>(client: Client & { capture: (event: string, properties?: any) => any }) {
  return new TypedEventCapture(client)
}