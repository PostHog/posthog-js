diff --git a/es/rrweb/packages/rrweb/src/record/observers/canvas/canvas-manager.js b/es/rrweb/packages/rrweb/src/record/observers/canvas/canvas-manager.js
index 8746997c9b849ac5c952fdbe0a8dd608d6680a3a..d4a23978d4d6ee5d060c281e1cc8459b2a76885c 100644
--- a/es/rrweb/packages/rrweb/src/record/observers/canvas/canvas-manager.js
+++ b/es/rrweb/packages/rrweb/src/record/observers/canvas/canvas-manager.js
@@ -91,11 +91,21 @@ class CanvasManager {
         let rafId;
         const getCanvas = () => {
             const matchedCanvas = [];
-            win.document.querySelectorAll('canvas').forEach((canvas) => {
-                if (!isBlocked(canvas, blockClass, blockSelector, true)) {
-                    matchedCanvas.push(canvas);
-                }
-            });
+            const searchCanvas = (root) => {
+                root.querySelectorAll('canvas').forEach((canvas) => {
+                    if (!isBlocked(canvas, blockClass, blockSelector, true)) {
+                        matchedCanvas.push(canvas);
+                    }
+                });
+                root.querySelectorAll('*').forEach((elem) => {
+                    if (elem.shadowRoot) {
+                        searchCanvas(elem.shadowRoot);
+                    }
+                });
+            };
+            
+            searchCanvas(win.document);
+            
             return matchedCanvas;
         };
         const takeCanvasSnapshots = (timestamp) => {
@@ -111,6 +121,12 @@ class CanvasManager {
                 const id = this.mirror.getId(canvas);
                 if (snapshotInProgressMap.get(id))
                     return;
+
+                // The browser throws if the canvas is 0 in size
+                // Uncaught (in promise) DOMException: Failed to execute 'createImageBitmap' on 'Window': The source image width is 0.
+                // Assuming the same happens with height
+                if (canvas.width === 0 || canvas.height === 0) return;
+
                 snapshotInProgressMap.set(id, true);
                 if (['webgl', 'webgl2'].includes(canvas.__context)) {
                     const context = canvas.getContext(canvas.__context);
@@ -118,12 +134,20 @@ class CanvasManager {
                         context.clear(context.COLOR_BUFFER_BIT);
                     }
                 }
-                const bitmap = yield createImageBitmap(canvas);
+
+                const width = canvas.clientWidth;
+                const height = canvas.clientHeight;
+
+                const bitmap = yield createImageBitmap(canvas, {
+                    resizeWidth: width,
+                    resizeHeight: height
+                })
+
                 worker.postMessage({
                     id,
                     bitmap,
-                    width: canvas.width,
-                    height: canvas.height,
+                    width: width,
+                    height: height,
                     dataURLOptions: options.dataURLOptions,
                 }, [bitmap]);
             }));
